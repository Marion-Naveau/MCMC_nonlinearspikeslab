
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

INFO : Large data should be stored in your work/ folder. 
 
[Sauvegarde de la session précédente restaurée]

> rm(list=ls())
> 
> library(ggplot2)
> library(nlme)
> library(cowplot)
> library(glmnet)
Le chargement a nécessité le package : Matrix
Loaded glmnet 4.1-3
> library(mvnfast)
> library(doParallel)
Le chargement a nécessité le package : foreach
Le chargement a nécessité le package : iterators
Le chargement a nécessité le package : parallel
> library(microbenchmark)
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ tibble  3.1.6     ✔ dplyr   1.0.8
✔ tidyr   1.2.0     ✔ stringr 1.4.0
✔ readr   2.1.2     ✔ forcats 0.5.1
✔ purrr   0.3.4     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ dplyr::collapse()   masks nlme::collapse()
✖ tidyr::expand()     masks Matrix::expand()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::lag()        masks stats::lag()
✖ tidyr::pack()       masks Matrix::pack()
✖ tidyr::unpack()     masks Matrix::unpack()
✖ purrr::when()       masks foreach::when()
> library(nonlinearspikeslab)
> library(tidyverse)
> 
> source("nimble_fit_functions.R")
> 
> S=50                         #nb de simulations
> n <- 200 # nb d'individus
> J <- 10 # nb de repetitions
> p <- 1500 # nb de covariables
> sigma2 <- 30 # variance residuelle des y
> Gamma2 <- 200 # variance inter-individuelle des phi_i
> mu <- 1200 # intercept
> beta <- c(100, 50, 20, rep(0, p - 3)) # vecteur d'effets fixes
> betatild <- c(mu, beta)
> c0 <- 200 # parametre de la fct g
> c2 <- 300 # parametre de la fct g, doit etre different de 0
> psi <- c(c0, c2)
> 
> g <- function(phi_i, psi, t_ij) {
+   return(psi[1] / (1 + exp(-(t_ij - phi_i) / psi[2])))
+ }
> 
> ncore = 10
> cl = makeCluster(ncore)
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
INFO : Large data should be stored in your work/ folder. 
 
> registerDoParallel(cl)
> 
> nb_iter_finish=0
> save(nb_iter_finish,file="Nb_iter_Temps_MCMC_p1500.Rdata")
> 
> Temps_Tot<-foreach(s = 1:S, .packages = c("nlme","mvnfast","doParallel","ggplot2","cowplot","glmnet","microbenchmark","tidyverse","nimble")) %dopar% {
+ 
+   print(s)
+   # Simulation du modèle
+   set.seed(s)
+   phi <- rep(0, n)
+   Vtild <- matrix(NA, nrow = n, ncol = p + 1)
+   Vtild[, 1] <- rep(1, n)
+   for (i in 1:n) {
+     # simulation de V_i
+     Vtild[i, 2:(p + 1)] <- rmvn(1, mu = rep(0, p), sigma = diag(1, p))
+   }
+   Vtild[, c(2:(p + 1))] <- scale(Vtild[, c(2:(p + 1))])
+   # simulation de phi_i
+   for (i in 1:n) {
+     phi[i] <- sum(betatild * Vtild[i, ]) + rnorm(1, mean = 0, sd = sqrt(Gamma2))
+   }
+   V <- Vtild[, -1]
+   # Simulation des données observées y
+ 
+   Y <- rep(0, n * J) # vecteur des y_ij avec y_ij=Y[(i-1)*J+j]
+   t <- rep(seq(150, 3000, length = J), n) # vecteur des t_ij avec t_ij=t[(i-1)*J+j]
+   for (i in 1:n) {
+     for (j in 1:J) {
+       Y[(i - 1) * J + j] <- g(phi_i = phi[i], psi = psi, t_ij = t[(i - 1) * J + j]) + rnorm(1, mean = 0, sd = sqrt(sigma2))
+     }
+   }
+ 
+   Id <- rep(c(1:n), each = J)
+   data <- data.frame(Id, Y, t)
+   id <- as.matrix(Id)
+   data2 <- data[id <= 30, ]
+   ggplot(data2, aes(x = t, y = Y, group = Id)) +
+     geom_point() +
+     geom_line() +
+     theme_bw()
+ 
+   data_input = data %>%
+     as_tibble() %>%
+     left_join(V %>%
+                 as_tibble() %>%
+                 rowid_to_column("Id")) %>%
+     rename(times = t, i = Id)
+ 
+   nu0=0.04
+   niter=3000
+   nimbleMCMC_object = OneVariableParamSpikeAndSlabDelay_marginal_delta_setup(data_input,nu_0=nu0,niter=niter)
+ 
+   ## Time the execution for MCMC sampling (1 chain)
+   temps=TimeOneVariableParamSpikeAndSlabDelay_marginal_delta(Cmcmc = nimbleMCMC_object, nu_0 = nu0, niter = niter)
+ 
+   load("Nb_iter_Temps_MCMC_p1500.Rdata")
+   nb_iter_finish=nb_iter_finish+1
+   save(nb_iter_finish,file="Nb_iter_Temps_MCMC_p1500.Rdata")
+ 
+   temps
+ }
> stopCluster(cl)
> 
> save(Temps_Tot,file="Temps_MCMC_p1500.Rdata")
> 
> load("Temps_MCMC_p1500.Rdata") #Gamma2_init=500
> 
> temps=rep(0,50)
> for (s in 1:50){
+   temps[s]=Temps_Tot[[s]]
+ }
> temps
 [1] 1898.615 1895.014 1892.532 1894.799 1894.869 1895.498 1897.631 1897.007
 [9] 1895.961 1892.462 1893.772 1886.601 1892.130 1892.340 1895.590 1896.593
[17] 1895.871 1894.832 1894.250 1900.519 1884.726 1890.955 1899.415 1895.696
[25] 1893.267 1898.122 1892.855 1895.912 1895.553 1893.973 2076.256 2072.136
[33] 2104.466 2101.818 2083.214 2094.314 2081.816 2103.849 2103.069 2100.052
[41] 2130.928 2129.782 2137.503 2138.744 2145.464 2145.803 2161.282 2149.612
[49] 2156.225 2147.347
> min(temps)
[1] 1884.726
> mean(temps)
[1] 1984.021
> 
> 
> proc.time()
utilisateur     système      écoulé 
      2.821       0.443   10393.895 

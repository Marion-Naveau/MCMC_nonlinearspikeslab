
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

INFO : Large data should be stored in your work/ folder. 
 
[Sauvegarde de la session précédente restaurée]

> rm(list = ls())
> 
> source("Simul_donnees_Marion.R")
Le chargement a nécessité le package : Matrix
Loaded glmnet 4.1-3
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ tibble  3.1.6     ✔ dplyr   1.0.8
✔ tidyr   1.2.0     ✔ stringr 1.4.0
✔ readr   2.1.2     ✔ forcats 0.5.1
✔ purrr   0.3.4     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::collapse() masks nlme::collapse()
✖ tidyr::expand()   masks Matrix::expand()
✖ dplyr::filter()   masks stats::filter()
✖ dplyr::lag()      masks stats::lag()
✖ tidyr::pack()     masks Matrix::pack()
✖ tidyr::unpack()   masks Matrix::unpack()
Joining, by = "Id"
Message d'avis :
The `x` argument of `as_tibble.matrix()` must have unique column names if `.name_repair` is omitted as of tibble 2.0.0.
Using compatibility `.name_repair`.
This warning is displayed once every 8 hours.
Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. 
> source("nimble_fit_functions.R")
> library(nimble)
nimble version 0.12.2 is loaded.
For more information on NIMBLE and a User Manual,
please visit https://R-nimble.org.

Attachement du package : ‘nimble’

L'objet suivant est masqué depuis ‘package:stats’:

    simulate

> 
> nimbleMCMC_object = OneVariableParamSpikeAndSlabDelay_marginal_delta_setup(data_input)
Defining model
  [Note] Registering 'dmix2norm_unsafe' as a distribution based on its use in BUGS code. If you make changes to the nimbleFunctions for the distribution, you must call 'deregisterDistributions' before using the distribution in BUGS code for those changes to take effect.
Building model
Setting data and initial values
Running calculate on model
  [Note] Any error reports that follow may simply reflect missing values in model variables.
Checking model sizes and dimensions
  [Note] safeDeparse: truncating deparse output to 1 lines.
===== Monitors =====
thin = 1: alpha, beta, Gamma2, mu, phi, psi, sigma2, yhat
===== Samplers =====
RW sampler (5207)
  - Gamma2
  - sigma2
  - alpha
  - eta[]  (2 elements)
  - psi[]  (2 elements)
  - beta[]  (5000 elements)
  - phi[]  (200 elements)
conjugate sampler (1)
  - mu
  [Note] safeDeparse: truncating deparse output to 1 lines.
===== Monitors =====
thin = 1: alpha, eta, Gamma2, mu, sigma2
===== Samplers =====
RW sampler (5207)
  - Gamma2
  - sigma2
  - alpha
  - eta[]  (2 elements)
  - psi[]  (2 elements)
  - beta[]  (5000 elements)
  - phi[]  (200 elements)
conjugate sampler (1)
  - mu
Compiling
  [Note] This may take a minute.
  [Note] Use 'showCompilerOutput = TRUE' to see C++ compilation details.
> 
> ## Time the execution for MCMC sampling (1 chain)
> temps=TimeOneVariableParamSpikeAndSlabDelay_marginal_delta(Cmcmc = nimbleMCMC_object, nu_0 = 0.04, niter = 3000)
|-------------|-------------|-------------|-------------|
|-------------------------------------------------------|
> 
> save(temps,file="temps3_p5000.Rdata")
> 
> ## Actually get a sample from posterior.
> #FitOneVariableParamSpikeAndSlabDelay_marginal_delta(Cmcmc = nimbleMCMC_object, nu_0 = 0.01, niter = 5000)
> 
> load("temps.Rdata") #p=5000, nu0=0.04
> load("temps2_p5000.Rdata") #p=5000, nu0=0.04
> load("temps3_p5000.Rdata") #p=5000, nu0=0.04
> 
> load("temps1.Rdata") #nu0=0.01
> temps1=temps
> load("temps2.Rdata") #nu0=0.01
> temps2=temps
> load("temps3.Rdata") #nu0=0.01
> temps3=temps
> load("temps4.Rdata") #nu0=0.01
> temps4=temps
> load("temps5.Rdata") #nu0=0.01
> temps5=temps
> 
> load("temps6.Rdata") #nu0=0.04
> temps6=temps
> load("temps7.Rdata") #nu0=0.04
> temps7=temps
> load("temps8.Rdata") #nu0=0.04
> temps8=temps
> load("temps9.Rdata") #nu0=0.04
> temps9=temps
> load("temps10.Rdata") #nu0=0.04
> temps10=temps
> 
> load("temps11.Rdata") #nu0=2
> temps11=temps
> load("temps12.Rdata") #nu0=2
> temps12=temps
> load("temps13.Rdata") #nu0=2
> temps13=temps
> load("temps14.Rdata") #nu0=2
> temps14=temps
> load("temps15.Rdata") #nu0=2
> temps15=temps
> 
> proc.time()
utilisateur     système      écoulé 
  26472.622     135.366   26617.222 
